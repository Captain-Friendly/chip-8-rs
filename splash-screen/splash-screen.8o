# This source code was made and tested with Octo
# they are the best around I think for ease of use

:alias px v1
:alias py v2
:const block-width 2

: main
	clear
	px := 5
	py := 8
  i  := sp-C
  sprite px py 15
	px += 8
	i  := sp-H
  sprite px py 15
	px += 6
	i  := sp-I
  sprite px py 15
	px += 4
	i  := sp-P
  sprite px py 15
	px += 6
	i := sp-8
	sprite px py 15
	px += 8
	i  := sp-d
  sprite px py 15
	px += 6
	i  := sp-R
  sprite px py 15
	px += 7
	i  := sp-S
  sprite px py 15
	
	px := 0
	py := 20
	loop
		px += block-width
		vB := 62
		:call move-block-right-vB

		px -= block-width
		vB := 0
		:call move-block-left-vB
	again

 
:const num-blocks 3
: move-block-right-vB
	
	# the delay between draws
	vA := 1
	i := sp-Block
	# the number of times that we will draw block before starting
	vC := num-blocks
	# the calculated width of the line
	vD := 0
	loop
		sprite px py 2
		px += block-width
		vD += block-width
		:call wait-vA
		vC -= 1
		if vC != 0 then
	again
	loop
		# drawing next block
		sprite px py 2
		
		# going back and erasing the start of the line
		px -= vD
		sprite px py 2
		
		:call wait-vA
		px += vD
		px += block-width
		if px < vB then
	again
	# erasing the line
	px -= vD
	vC := num-blocks
	loop
		sprite px py 2
		px += block-width
		:call wait-vA
		vC -= 1
		if vC != 0 then
	again
	return
	
: move-block-left-vB
	# the delay between draws
	vA := 2
	i := sp-Block
	# the number of times that we will draw block before starting
	vC := num-blocks
	# the calculated width of the line
	vD := 0
	loop
		sprite px py 2
		px -= block-width
		vD += block-width
		:call wait-vA
		vC -= 1
		if vC != 0 then
	again
	loop
		# drawing next block
		sprite px py 2
		
		# going back and erasing the start of the line
		px += vD
		sprite px py 2
		
		:call wait-vA
		px -= vD
		px -= block-width
		if px > vB then
	again
	
	# erasing the line
	px += vD
	vC := num-blocks
	loop
		sprite px py 2
		px -= block-width
		:call wait-vA
		vC -= 1
		if vC != 0 then
	again
	return

# waits until the delay timer has decreased by the ammount of vA
: wait-vA
	delay := vA
	loop
		vF := delay
		if vF != 0 then
	again
	return
 
: sp-C  0x3C 0x7E 0xC6 0xC0 0xC0 0xC0 0xC0 0xC6 0xC6 0x7C 0x38 0x00 0x00 0x00 0x00
: sp-H  0x00 0x80 0xC0 0xC0 0xC0 0xF8 0xCC 0xCC 0xCC 0xCC 0xCC 0x00 0x00 0x00 0x00
: sp-I  0x00 0x00 0x60 0x60 0x00 0x60 0x60 0x60 0x60 0x60 0x60 0x00 0x00 0x00 0x00
: sp-P  0x00 0x00 0x78 0xCC 0xC4 0xC4 0xCC 0xF8 0xC0 0xC0 0xC0 0x00 0x00 0x00 0x00
: sp-8  0x3E 0x67 0x63 0x63 0x3E 0x3E 0x63 0x63 0x63 0x3E 0x1C 0x00 0x00 0x00 0x00
: sp-d  0x00 0x00 0x00 0x00 0x00 0x00 0x78 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00
: sp-R  0x00 0x78 0xCC 0xC4 0xC4 0xCC 0xF8 0xFC 0xCE 0xC6 0xC6 0x00 0x00 0x00 0x00
: sp-S  0x00 0x1E 0x30 0x60 0x60 0x30 0x18 0x0C 0x06 0x0E 0x7C 0x00 0x00 0x00 0x00
: sp-Block 0xC0 0xC0 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00 0x00